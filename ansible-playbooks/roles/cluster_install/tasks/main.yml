---

- include_vars: "clusters/{{ cluster_def }}/vars/cluster-vars.yml"

- include_role: 
    name: cloudera_api

- include_role:
    name: cm_gethosts

# name - check if the parcel repo is empty
# if not and 
- name: check folder empty or not
  file:
    paths: /opt/cloudera/parcel-repo
    patterns: '*parcel'
  register: filesFound

- name: check for torrents if files found
  file:
    paths: /opt/cloudera/parcel-repo
    patterns: '*torrent'
  register: torrentsFound
  when: filesFound.matched > 0

- name: restart agent
  systemd:
    name: "{{ item }}"
    state: restarted 
  loop:
    - cloudera-scm-agent
    - cloudera-scm-server
  when: 
    - torrentsFound.matched = 0 
    - filesFound.matched > 0

- name: wait agents and servers to restart
  pause:
    seconds: 60 

- name: Print the extracted host identifiers and names
  debug:
    var: scm_hosts
    verbosity: 1

- name: Discover product versions from parcel manifests
  uri:
    url: "{{ item }}/manifest.json"
    status_code: 200
    body_format: json
    return_content: yes
  register: manifests
  with_items: 
    - "{{ scm_parcel_repositories }}"
  
- set_fact:
    scm_product_list: "{{ manifests.results | map(attribute='json') | list | json_query('[*].parcels[*].parcelName') | list | sum(start=[]) }}"

- set_fact:
    scm_products: "{{ scm_product_list | map('regex_replace', '-[a-z0-9]+.parcel$','') | list | unique  }}"  
    
- name: generate host config
  set_fact: 
    cluster_template_json: "{{ lookup('template', 'base.j2', convert_date=False) }}"

- debug:
    var: cluster_template_json
    verbosity: 1

- include: apply_template.yml
#- name: count host templates
   
  